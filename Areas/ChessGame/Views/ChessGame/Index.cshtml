@model ChessGameModel

<h1>ChessGame <i class="fas fa-chess-board"></i></h1>
<style>
    a {
        box-sizing: border-box;
    }
</style>
@*Main chess board layout*@
<div class="container-fluid justify-content-around align-items-center d-flex chess-board-container" style="background-color: saddlebrown;">
    <div class="d-flex flex-column player1 flex-wrap" style="max-height: 720px;">
        @{
            for (int i = 1; i < 17; i++)
            {
                @:<div class="w-100 h-100 piece-@i" style="max-width: 50px;"></div>
            }
        }
    </div>
    <div class="justify-content-center align-items-center chess-board" style="width:720px;">
        @for (int x = 1; x < 9; x++)
        {
            <div class="row r-@x justify-content-center align-items-center">
                @{
                    for (int y = 1; y < 9; y++)
                    {
                        //Logic for making the checkered board color
                        var bgColor = "";
                        if (x % 2 == 1)
                        {
                            if (y % 2 == 1)
                                bgColor = "bg-warning";
                            else
                                bgColor = "bg-success";
                        }
                        else if (x % 2 == 0)
                        {
                            if (y % 2 == 1)
                                bgColor = "bg-success";
                            else
                                bgColor = "bg-warning";
                        }

                        <div class="col r-@(x)c-@(y) @bgColor p-0 d-flex justify-content-center align-items-center" style="max-width: 90px; height: 90px; font-size: 70px; border: 1px solid black;"
                             data-x="@x" data-y="@y">
                            @{
                                foreach (var item in Model.Player1Pieces)
                                {
                                    if (item.X == x && item.Y == y)
                                        @Html.Raw(item.FaIcon)
                                }
                                foreach (var item in Model.Player2Pieces)
                                {
                                    if (item.X == x && item.Y == y)
                                        @Html.Raw(item.FaIcon)
                                }
                            }
                        </div>
                    }
                }
            </div>
        }
    </div>
    <div class="d-flex flex-column player2 flex-wrap" style="max-height: 720px;">
        @{
            for (int i = 1; i < 17; i++)
            {
                @:<div class="w-100 h-100 piece-@i" style="max-width: 50px;"></div>
            }
        }
    </div>
</div>

@section Scripts
{
    @await Html.PartialAsync("_ValidationScriptsPartial")
    <script>
        var potentialMoveElements = [];
        var pieceToPotentialMove = null;

        $("body").on("click", ".svg-inline--fa path", function (e) {
            e.preventDefault();

            //Remove moves and clear variables ready for the new piece and new potential moves
            if (potentialMoveElements != []) {
                removePotentialMoves();
                potentialMoveElements = [];
                pieceToPotentialMove = null;
            }

            var me = $(this);
            var piece = $(this).closest(".svg-inline--fa");

            var x = $(piece).closest(".col").data("x");
            var y = $(piece).closest(".col").data("y");
            pieceToPotentialMove = $(piece);

            //#####
            // PAWN
            //#####
            if ($(piece).data("piece") == "pawn") {
                //Move forward two unless pawn moved = true -> then move only 1 forward
                //If enemy pawn is diagonally 1 forwards both ways then highlight
                if ($(piece).data("pawn-moved") == false) {
                    if ($(piece).data("player") == 1) {
                        //Forwards
                        if ($(`.r-${x + 1}c-${y}`).children().length == 0) {
                            potentialMoveElements.push($(`.r-${x + 1}c-${y}`));
                            if ($(`.r-${x + 2}c-${y}`).children().length == 0) {
                                potentialMoveElements.push($(`.r-${x + 2}c-${y}`));
                            }
                        }
                        //Take diagonally
                        if ($(`.r-${x + 1}c-${y + 1}`).children().length != 0) {
                            potentialMoveElements.push($(`.r-${x + 1}c-${y + 1}`))
                        }
                        if ($(`.r-${x + 1}c-${y - 1}`).children().length != 0) {
                            potentialMoveElements.push($(`.r-${x + 1}c-${y - 1}`))
                        }
                    }
                    else if ($(piece).data("player") == 2) {
                        //Forwards
                        if ($(`.r-${x - 1}c-${y}`).children().length == 0) {
                            potentialMoveElements.push($(`.r-${x - 1}c-${y}`));
                            if ($(`.r-${x - 2}c-${y}`).children().length == 0) {
                                potentialMoveElements.push($(`.r-${x - 2}c-${y}`));
                            }
                        }
                        //Take diagonally
                        if ($(`.r-${x - 1}c-${y + 1}`).children().length != 0) {
                            potentialMoveElements.push($(`.r-${x - 1}c-${y + 1}`))
                        }
                        if ($(`.r-${x - 1}c-${y - 1}`).children().length != 0) {
                            potentialMoveElements.push($(`.r-${x - 1}c-${y - 1}`))
                        }
                    }
                }
                else if ($(piece).data("pawn-moved") == true) {
                    if ($(piece).data("player") == 1) {
                        //Forwards
                        if ($(`.r-${x + 1}c-${y}`).children().length == 0) {
                            potentialMoveElements.push($(`.r-${x + 1}c-${y}`));
                        }
                        //Take diagonally
                        if ($(`.r-${x + 1}c-${y - 1}`).children().length != 0) {
                            potentialMoveElements.push($(`.r-${x + 1}c-${y + 1}`))
                        }
                        if ($(`.r-${x + 1}c-${y - 1}`).children().length != 0) {
                            potentialMoveElements.push($(`.r-${x + 1}c-${y - 1}`))
                        }
                    }
                    else if ($(piece).data("player") == 2) {
                        //Forwards
                        if ($(`.r-${x - 1}c-${y}`).children().length == 0) {
                            potentialMoveElements.push($(`.r-${x - 1}c-${y}`));
                        }
                        //Take diagonally
                        if ($(`.r-${x - 1}c-${y + 1}`).children().length != 0) {
                            potentialMoveElements.push($(`.r-${x - 1}c-${y + 1}`))
                        }
                        if ($(`.r-${x - 1}c-${y - 1}`).children().length != 0) {
                            potentialMoveElements.push($(`.r-${x - 1}c-${y - 1}`))
                        }
                    }
                }
            }
            //#######
            // Knight
            //#######
            else if ($(piece).data("piece") == "knight") {
                potentialMoveElements.push($(`.r-${x - 2}c-${y + 1}, .r-${x - 2}c-${y - 1}, .r-${x + 1}c-${y + 2}, .r-${x - 1}c-${y + 2},
                                                      .r-${x + 2}c-${y + 1}, .r-${x + 2}c-${y - 1}, .r-${x + 1}c-${y - 2}, .r-${x - 1}c-${y - 2}`));
            }
            //#####
            // Rook
            //#####
            else if ($(piece).data("piece") == "rook") {
                var altYMoves1 = [`.r-${x}c-${(y + 1)}`, `.r-${x}c-${(y + 2)}`, `.r-${x}c-${(y + 3)}`, `.r-${x}c-${(y + 4)}`, `.r-${x}c-${(y + 5)}`, `.r-${x}c-${(y + 6)}`, `.r-${x}c-${(y + 7)}`, `.r-${x}c-${(y + 8)}`];
                var altYMoves2 = [`.r-${x}c-${(y - 1)}`, `.r-${x}c-${(y - 2)}`, `.r-${x}c-${(y - 3)}`, `.r-${x}c-${(y - 4)}`, `.r-${x}c-${(y - 5)}`, `.r-${x}c-${(y - 6)}`, `.r-${x}c-${(y - 7)}`, `.r-${x}c-${(y - 8)}`];
                var altXMoves1 = [`.r-${(x + 1)}c-${y}`, `.r-${(x + 2)}c-${y}`, `.r-${(x + 3)}c-${y}`, `.r-${(x + 4)}c-${y}`, `.r-${(x + 5)}c-${y}`, `.r-${(x + 6)}c-${y}`, `.r-${(x + 7)}c-${y}`, `.r-${(x + 8)}c-${y}`];
                var altXMoves2 = [`.r-${(x - 1)}c-${y}`, `.r-${(x - 2)}c-${y}`, `.r-${(x - 3)}c-${y}`, `.r-${(x - 4)}c-${y}`, `.r-${(x - 5)}c-${y}`, `.r-${(x - 6)}c-${y}`, `.r-${(x - 7)}c-${y}`, `.r-${(x - 8)}c-${y}`];

                var altMoves = [altYMoves1, altYMoves2, altXMoves2, altXMoves1];
                $(altMoves).each(function (ii, ell) {
                    $(ell).each(function (i, el) {
                        console.log($(el));
                        if ($(el).children().length == 0) {
                            potentialMoveElements.push($(el));
                        }
                        else if ($(el).children().length != 0) {
                            if ($(el).find("svg").data("player") == $(piece).data("player")) {
                                return false;
                            }
                            else if ($(el).find("svg").data("player") != $(piece).data("player")) {
                                potentialMoveElements.push($(el));
                                return false;
                            }
                        }
                    })
                })
            }
            //#######
            // Bishop
            //#######
            else if ($(piece).data("piece") == "bishop") {
                var altYMoves1 = [`.r-${x + 1}c-${(y + 1)}`, `.r-${x + 2}c-${(y + 2)}`, `.r-${x + 3}c-${(y + 3)}`, `.r-${x + 4}c-${(y + 4)}`, `.r-${x + 5}c-${(y + 5)}`, `.r-${x + 6}c-${(y + 6)}`, `.r-${x + 7}c-${(y + 7)}`, `.r-${x + 8}c-${(y + 8)}`];
                var altYMoves2 = [`.r-${x - 1}c-${(y - 1)}`, `.r-${x - 2}c-${(y - 2)}`, `.r-${x - 3}c-${(y - 3)}`, `.r-${x - 4}c-${(y - 4)}`, `.r-${x - 5}c-${(y - 5)}`, `.r-${x - 6}c-${(y - 6)}`, `.r-${x - 7}c-${(y - 7)}`, `.r-${x - 8}c-${(y - 8)}`];
                var altXMoves1 = [`.r-${(x + 1)}c-${y - 1}`, `.r-${(x + 2)}c-${y - 2}`, `.r-${(x + 3)}c-${y - 3}`, `.r-${(x + 4)}c-${y - 4}`, `.r-${(x + 5)}c-${y - 5}`, `.r-${(x + 6)}c-${y - 6}`, `.r-${(x + 7)}c-${y - 7}`, `.r-${(x + 8)}c-${y - 8}`];
                var altXMoves2 = [`.r-${(x - 1)}c-${y + 1}`, `.r-${(x - 2)}c-${y + 2}`, `.r-${(x - 3)}c-${y + 3}`, `.r-${(x - 4)}c-${y + 4}`, `.r-${(x - 5)}c-${y + 5}`, `.r-${(x - 6)}c-${y + 6}`, `.r-${(x - 7)}c-${y + 7}`, `.r-${(x - 8)}c-${y + 8}`];

                var altMoves = [altYMoves1, altYMoves2, altXMoves2, altXMoves1];
                $(altMoves).each(function (ii, ell) {
                    $(ell).each(function (i, el) {
                        if ($(el).children().length == 0) {
                            potentialMoveElements.push($(el));
                        }
                        else if ($(el).children().length != 0) {
                            if ($(el).find("svg").data("player") == $(piece).data("player")) {
                                return false;
                            }
                            else if ($(el).find("svg").data("player") != $(piece).data("player")) {
                                potentialMoveElements.push($(el));
                                return false;
                            }
                        }
                    })
                })
            }
            //######
            // Queen
            //######
            else if ($(piece).data("piece") == "queen") {
                //diagonal moves
                var diagAltYMoves1 = [`.r-${x + 1}c-${(y + 1)}`, `.r-${x + 2}c-${(y + 2)}`, `.r-${x + 3}c-${(y + 3)}`, `.r-${x + 4}c-${(y + 4)}`, `.r-${x + 5}c-${(y + 5)}`, `.r-${x + 6}c-${(y + 6)}`, `.r-${x + 7}c-${(y + 7)}`, `.r-${x + 8}c-${(y + 8)}`];
                var diagAltYMoves2 = [`.r-${x - 1}c-${(y - 1)}`, `.r-${x - 2}c-${(y - 2)}`, `.r-${x - 3}c-${(y - 3)}`, `.r-${x - 4}c-${(y - 4)}`, `.r-${x - 5}c-${(y - 5)}`, `.r-${x - 6}c-${(y - 6)}`, `.r-${x - 7}c-${(y - 7)}`, `.r-${x - 8}c-${(y - 8)}`];
                var diagAltXMoves1 = [`.r-${(x + 1)}c-${y - 1}`, `.r-${(x + 2)}c-${y - 2}`, `.r-${(x + 3)}c-${y - 3}`, `.r-${(x + 4)}c-${y - 4}`, `.r-${(x + 5)}c-${y - 5}`, `.r-${(x + 6)}c-${y - 6}`, `.r-${(x + 7)}c-${y - 7}`, `.r-${(x + 8)}c-${y - 8}`];
                var diagAltXMoves2 = [`.r-${(x - 1)}c-${y + 1}`, `.r-${(x - 2)}c-${y + 2}`, `.r-${(x - 3)}c-${y + 3}`, `.r-${(x - 4)}c-${y + 4}`, `.r-${(x - 5)}c-${y + 5}`, `.r-${(x - 6)}c-${y + 6}`, `.r-${(x - 7)}c-${y + 7}`, `.r-${(x - 8)}c-${y + 8}`];

                //straight moves
                var straightAltYMoves1 = [`.r-${x}c-${(y + 1)}`, `.r-${x}c-${(y + 2)}`, `.r-${x}c-${(y + 3)}`, `.r-${x}c-${(y + 4)}`, `.r-${x}c-${(y + 5)}`, `.r-${x}c-${(y + 6)}`, `.r-${x}c-${(y + 7)}`, `.r-${x}c-${(y + 8)}`];
                var straightAltYMoves2 = [`.r-${x}c-${(y - 1)}`, `.r-${x}c-${(y - 2)}`, `.r-${x}c-${(y - 3)}`, `.r-${x}c-${(y - 4)}`, `.r-${x}c-${(y - 5)}`, `.r-${x}c-${(y - 6)}`, `.r-${x}c-${(y - 7)}`, `.r-${x}c-${(y - 8)}`];
                var straightAltXMoves1 = [`.r-${(x + 1)}c-${y}`, `.r-${(x + 2)}c-${y}`, `.r-${(x + 3)}c-${y}`, `.r-${(x + 4)}c-${y}`, `.r-${(x + 5)}c-${y}`, `.r-${(x + 6)}c-${y}`, `.r-${(x + 7)}c-${y}`, `.r-${(x + 8)}c-${y}`];
                var straightAltXMoves2 = [`.r-${(x - 1)}c-${y}`, `.r-${(x - 2)}c-${y}`, `.r-${(x - 3)}c-${y}`, `.r-${(x - 4)}c-${y}`, `.r-${(x - 5)}c-${y}`, `.r-${(x - 6)}c-${y}`, `.r-${(x - 7)}c-${y}`, `.r-${(x - 8)}c-${y}`];

                var altMoves = [diagAltYMoves1, diagAltYMoves2, diagAltXMoves1, diagAltXMoves2, straightAltYMoves1, straightAltYMoves2, straightAltXMoves1, straightAltXMoves2];
                $(altMoves).each(function (ii, ell) {
                    $(ell).each(function (i, el) {
                        if ($(el).children().length == 0) {
                            potentialMoveElements.push($(el));
                        }
                        else if ($(el).children().length != 0) {
                            if ($(el).find("svg").data("player") == $(piece).data("player")) {
                                return false;
                            }
                            else if ($(el).find("svg").data("player") != $(piece).data("player")) {
                                potentialMoveElements.push($(el));
                                return false;
                            }
                        }
                    })
                })
            }
            //#####
            // King
            //#####
            else if ($(piece).data("piece") == "king") {
                potentialMoveElements.push($(`.r-${x + 1}c-${y}, .r-${x - 1}c-${y}, .r-${x}c-${y + 1}, .r-${x}c-${y - 1},
                                                                       .r-${x + 1}c-${y + 1}, .r-${x - 1}c-${y - 1}, .r-${x + 1}c-${y - 1}, .r-${x - 1}c-${y + 1}`));
            }

            //Highlight the available moves
            $(potentialMoveElements).each(function (i, el) {
                $(el).addClass("bg-danger");
            });
            //Remove collision with same team at the end
            removeCollisionWithSameTeam($(piece).data("player"))
        })

        $("body").on("click", ".bg-danger", function (e) {
            e.preventDefault();

            var me = $(this);

            //Insert into new location
            //And remove potential moves
            if ($(pieceToPotentialMove).data("piece") == "pawn") {
                $(pieceToPotentialMove).data("pawn-moved", true);
            }

            //Populate taken pieces 
            if ($(pieceToPotentialMove).data("player") == 1) {
                $(".player1").children().each(function(el){
                    if($(this).children().length == 0){
                        $(this).html($(me).children("svg"));
                        return false;
                    }
                })
            }
            else if ($(pieceToPotentialMove).data("player") == 2) {
                $(".player2").children().each(function (el) {
                    if ($(this).children().length == 0) {
                        $(this).html($(me).children("svg"));
                        return false;
                    }
                })
            }

            $(this).html($(pieceToPotentialMove));

            //WHAT WAS THIS GOING TO DO?
            // if($(this).children().length != 0){
            //     $(this).child
            // }
            removePotentialMoves();
        })

        function removePotentialMoves() {
            $(".chess-board").find(".bg-danger").removeClass("bg-danger");
        }
        function removeCollisionWithSameTeam(player1) {
            $(".chess-board").find(".bg-danger").each(function (i, el) {
                var me = $(this);
                if ($(this).children().length != 0) {
                    if ($(this).find("svg").data("player") == player1) {
                        $(me).removeClass("bg-danger");
                    }
                }
            });
        }

    </script>
}